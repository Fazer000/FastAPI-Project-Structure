#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ FastAPI –ø—Ä–æ–µ–∫—Ç–∞.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ä–µ–∂–∏–º—ã –∑–∞–ø—É—Å–∫–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ–∫—Ä—É–∂–µ–Ω–∏—è.
"""

import os
import sys
import subprocess
import argparse
import shutil
from pathlib import Path
from typing import List, Optional


class ProjectRunner:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–æ–µ–∫—Ç–∞."""
    
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.app_module = "app.main:app"
        self.default_host = "127.0.0.1"
        self.default_port = 8000
    
    def check_python_version(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python."""
        if sys.version_info < (3, 9):
            print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.9 –∏–ª–∏ –≤—ã—à–µ")
            return False
        print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}")
        return True
    
    def check_dependencies(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""
        try:
            import fastapi
            import uvicorn
            print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return True
        except ImportError as e:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {e}")
            return False
    
    def install_dependencies(self, use_poetry: bool = False) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""
        print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        if use_poetry and shutil.which("poetry"):
            cmd = ["poetry", "install"]
        else:
            cmd = [sys.executable, "-m", "pip", "install", "-r", "requirements.txt"]
        
        try:
            subprocess.run(cmd, check=True, cwd=self.project_root)
            print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return True
        except subprocess.CalledProcessError:
            print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
            return False
    
    def setup_env_file(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞."""
        env_file = self.project_root / ".env"
        env_example = self.project_root / "env.example"
        
        if not env_file.exists() and env_example.exists():
            shutil.copy(env_example, env_file)
            print("‚úÖ –°–æ–∑–¥–∞–Ω .env —Ñ–∞–π–ª –∏–∑ –ø—Ä–∏–º–µ—Ä–∞")
            print("‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env")
    
    def run_development(self, host: str, port: int, reload: bool = True) -> None:
        """–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏."""
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ http://{host}:{port}")
        
        cmd = [
            "uvicorn",
            self.app_module,
            "--host", host,
            "--port", str(port),
        ]
        
        if reload:
            cmd.append("--reload")
        
        os.environ["ENVIRONMENT"] = "development"
        subprocess.run(cmd, cwd=self.project_root)
    
    def run_production(self, host: str, port: int, workers: int = 4) -> None:
        """–ó–∞–ø—É—Å–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ."""
        print(f"üè≠ –ó–∞–ø—É—Å–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ –Ω–∞ http://{host}:{port}")
        
        cmd = [
            "uvicorn",
            self.app_module,
            "--host", host,
            "--port", str(port),
            "--workers", str(workers),
            "--access-log",
        ]
        
        os.environ["ENVIRONMENT"] = "production"
        subprocess.run(cmd, cwd=self.project_root)
    
    def run_tests(self) -> None:
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤."""
        print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...")
        
        if not shutil.which("pytest"):
            print("‚ùå pytest –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
        
        cmd = ["pytest", "-v"]
        subprocess.run(cmd, cwd=self.project_root)
    
    def lint_code(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ª–∏–Ω—Ç–µ—Ä–∞–º–∏."""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞...")
        
        # Black
        if shutil.which("black"):
            print("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å Black...")
            subprocess.run(["black", "app/"], cwd=self.project_root)
        
        # isort
        if shutil.which("isort"):
            print("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ —Å isort...")
            subprocess.run(["isort", "app/"], cwd=self.project_root)
        
        # flake8
        if shutil.which("flake8"):
            print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å flake8...")
            subprocess.run(["flake8", "app/"], cwd=self.project_root)
    
    def show_info(self) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ."""
        print("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ:")
        print(f"   –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞: {self.project_root}")
        print(f"   –ú–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {self.app_module}")
        print(f"   Python –≤–µ—Ä—Å–∏—è: {sys.version}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
        files_to_check = [".env", "requirements.txt", "pyproject.toml"]
        for file in files_to_check:
            path = self.project_root / file
            status = "‚úÖ" if path.exists() else "‚ùå"
            print(f"   {file}: {status}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(description="–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ FastAPI –ø—Ä–æ–µ–∫—Ç–∞")
    
    subparsers = parser.add_subparsers(dest="command", help="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")
    
    # –ö–æ–º–∞–Ω–¥–∞ dev
    dev_parser = subparsers.add_parser("dev", help="–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    dev_parser.add_argument("--host", default="127.0.0.1", help="–•–æ—Å—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 127.0.0.1)")
    dev_parser.add_argument("--port", type=int, default=8000, help="–ü–æ—Ä—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 8000)")
    dev_parser.add_argument("--no-reload", action="store_true", help="–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É")
    
    # –ö–æ–º–∞–Ω–¥–∞ prod
    prod_parser = subparsers.add_parser("prod", help="–ó–∞–ø—É—Å–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ")
    prod_parser.add_argument("--host", default="0.0.0.0", help="–•–æ—Å—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.0.0.0)")
    prod_parser.add_argument("--port", type=int, default=8000, help="–ü–æ—Ä—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 8000)")
    prod_parser.add_argument("--workers", type=int, default=4, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤")
    
    # –ö–æ–º–∞–Ω–¥–∞ install
    install_parser = subparsers.add_parser("install", help="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    install_parser.add_argument("--poetry", action="store_true", help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Poetry")
    
    # –î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã
    subparsers.add_parser("test", help="–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤")
    subparsers.add_parser("lint", help="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞")
    subparsers.add_parser("info", help="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ")
    
    args = parser.parse_args()
    
    runner = ProjectRunner()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –≤–µ—Ä—Å–∏–∏
    if not runner.check_python_version():
        sys.exit(1)
    
    if args.command == "dev":
        if not runner.check_dependencies():
            print("–ü–æ–ø—Ä–æ–±—É–π: python run.py install")
            sys.exit(1)
        
        runner.setup_env_file()
        runner.run_development(
            host=args.host,
            port=args.port,
            reload=not args.no_reload
        )
    
    elif args.command == "prod":
        if not runner.check_dependencies():
            print("–ü–æ–ø—Ä–æ–±—É–π: python run.py install")
            sys.exit(1)
        
        runner.setup_env_file()
        runner.run_production(
            host=args.host,
            port=args.port,
            workers=args.workers
        )
    
    elif args.command == "install":
        runner.install_dependencies(use_poetry=args.poetry)
    
    elif args.command == "test":
        runner.run_tests()
    
    elif args.command == "lint":
        runner.lint_code()
    
    elif args.command == "info":
        runner.show_info()
    
    else:
        print("üöÄ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ FastAPI –ø—Ä–æ–µ–∫—Ç–∞")
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("  dev     - –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
        print("  prod    - –ó–∞–ø—É—Å–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ")
        print("  install - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        print("  test    - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤")
        print("  lint    - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞")
        print("  info    - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ")
        print("\n–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python run.py dev")
        print("  python run.py dev --port 8080")
        print("  python run.py prod --workers 8")
        print("  python run.py install")


if __name__ == "__main__":
    main()
